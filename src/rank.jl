module Rank

using LinearAlgebra: svd, opnorm, norm, Diagonal
#using Printf: @printf
using ..Util: schatten_norm, frob_inpr, make_unclipped_hankel, hankel_adj

#=
this code is a port of the Matlab code accompanying the paper
"Hankel matrix rank minimization
with applications to system identification and realization"
by Maryam Fazel, Ting Kei Pong, Defeng Sun, and Paul Tseng
=#

function primal_admm(;
        A::Function,
        Astar::Function,
        AstarAinv::Function,
        opnormA::Float64,
        b::Matrix{Float64},
        ùöº::Matrix{Float64},
        m::Int64, n::Int64, j::Int64, k::Int64,
        Œº::Float64,
        Œ≤::Float64 = 1.0,
        #Œ≤::Float64 = 0.5 * Œº * min(j,k) / opnorm(b),
        œÑ::Float64 = 1.61,
        maxIter::Int64 = 10000,
        gap_check_freq::Int64 = 10,
        tolerance::Float64 = 1e-4,
        Œµ::Float64 = 1e-8,
    )::Matrix{Float64}
    r = min(j, k)
    œÉ = Œ≤ / (Œ≤ * r + opnormA^2)
    (p1, p2) = size(b)
    (nk, q) = size(ùöº)
    @assert nk == n * k
    @assert opnorm(ùöº) ‚â§ 1

    function H(X::Matrix{Float64})::Matrix{Float64}
        make_unclipped_hankel(X = X, n = n, j = j, k = k) * ùöº
    end
    function Hstar(X::Matrix{Float64})::Matrix{Float64}
        hankel_adj(W = X * transpose(ùöº), m = m, n = n)
    end
    function f_obj(X::Matrix{Float64})::Float64
        0.5 * norm(A(X) - b)^2 + Œº * schatten_norm(H(X))
    end
    function d2(X::Matrix{Float64})::Tuple{Matrix{Float64}, Float64}
        HstarX = Hstar(X)
        RX = AstarAinv(HstarX)
        Astarb = Astar(b)
        bbar = AstarAinv(Astarb)
        (RX + bbar,
         0.5 * (frob_inpr(HstarX, RX)
                + 2 * frob_inpr(HstarX, bbar)
                + frob_inpr(Astarb, bbar)
                - norm(b)^2))
    end

    Y = zeros(m * j, q)
    y = zeros(m, n * (j + k - 1))
    ŒõdŒ≤ = zeros(m * j, q)
    Y_prev = ones(m * j, q)
    y_change = ones(m, n * (j + k - 1))
    ŒõdŒ≤_change = ones(m * j, q)
    numIter = 0
    min_fval = 1e20
    min_dval = 1e20
    y_best = zeros(m, n * (j + k - 1))
    duality_gap = 1.0
    while (numIter < maxIter && duality_gap ‚â• tolerance
           && (norm(y_change) ‚â• Œµ || norm(ŒõdŒ≤_change) ‚â• Œµ
               || norm(Y - Y_prev) ‚â• Œµ))
        F = svd(-H(y) + ŒõdŒ≤)
        Y_prev = Y
        Y = F.U * Diagonal(max.(F.S .- Œº/Œ≤, 0)) * F.Vt
        y_change = œÉ * (Hstar(-ŒõdŒ≤ + H(y) + Y) + Astar(A(y) - b) / Œ≤)
        ŒõdŒ≤_change = œÑ * (Y + H(y))
        y -= y_change
        ŒõdŒ≤ -= ŒõdŒ≤_change
        numIter += 1
        if (numIter % gap_check_freq == 0
            || (norm(y_change) < Œµ && norm(ŒõdŒ≤_change) < Œµ
                && norm(Y - Y_prev) < Œµ))
            FŒõ = svd(ŒõdŒ≤ * Œ≤)
            PŒõ = FŒõ.U * Diagonal(min.(F.S, Œº)) * FŒõ.Vt
            fval = f_obj(y)
            (yh, dval) = d2(PŒõ)
            fvalh = f_obj(yh)
            if fval < min_fval
                min_fval = fval
                y_best = y
            end
            if fvalh < min_fval
                min_fval = fvalh
                y_best = yh
            end
            min_dval = min(min_dval, dval)
            duality_gap = (min_fval + min_dval) / max(1, abs(min_dval))
            #@printf "fval = %f, dval = %f\n" fval dval
        end
    end

    #@printf "Œº = %f, duality_gap = %f, numIter = %d\n" Œº duality_gap numIter
    y_best
end

function dual_admm(;
        A::Function,
        Astar::Function,
        AstarAinv::Function,
        opnormA::Float64,
        b::Matrix{Float64},
        ùöº::Matrix{Float64},
        m::Int64, n::Int64, j::Int64, k::Int64,
        Œº::Float64,
        #Œ≤::Float64 = 1.0,
        Œ≤::Float64 = opnorm(b) / (16 * Œº * min(j,k)),
        œÑ::Float64 = 1.61,
        maxIter::Int64 = 10000,
        gap_check_freq::Int64 = 10,
        tolerance::Float64 = 1e-4,
        Œµ::Float64 = 1e-8,
    )::Matrix{Float64}
    r = min(j, k)
    œÉ1 = 1 / opnormA^2
    œÉ2 = 1 / r
    (p1, p2) = size(b)
    (nk, q) = size(ùöº)
    @assert nk == n * k
    @assert opnorm(ùöº) ‚â§ 1

    function H(X::Matrix{Float64})::Matrix{Float64}
        make_unclipped_hankel(X = X, n = n, j = j, k = k) * ùöº
    end
    function Hstar(X::Matrix{Float64})::Matrix{Float64}
        hankel_adj(W = X * transpose(ùöº), m = m, n = n)
    end
    function f_obj(X::Matrix{Float64})::Float64
        0.5 * norm(A(X) - b)^2 + Œº * schatten_norm(H(X))
    end
    function d2(X::Matrix{Float64})::Tuple{Matrix{Float64}, Float64}
        HstarX = Hstar(X)
        RX = AstarAinv(HstarX)
        Astarb = Astar(b)
        bbar = AstarAinv(Astarb)
        (RX + bbar,
         0.5 * (frob_inpr(HstarX, RX)
                + 2 * frob_inpr(HstarX, bbar)
                + frob_inpr(Astarb, bbar)
                - norm(b)^2))
    end

    œÉdœÉpŒ≤ = œÉ1 / (œÉ1 + Œ≤)
    Œ≤dœÉ = Œ≤ / œÉ1
    œÑŒ≤ = œÑ * Œ≤

    ùõÑ = zeros(p1, p2)
    Œõ = zeros(m * j, q)
    y = zeros(m, n * (j + k - 1))
    ùõÑ_prev = ones(p1, p2)
    Œõ_prev = ones(m * j, q)
    y_change = ones(m, n * (j + k - 1))

    numIter = 0
    min_fval = 1e20
    min_dval = 1e20
    y_best = zeros(m, n * (j + k - 1))
    duality_gap = 1.0
    while (numIter < maxIter && duality_gap ‚â• tolerance
           && (norm(ùõÑ - ùõÑ_prev) ‚â• Œµ
               || norm(Œõ - Œõ_prev) ‚â• Œµ
               || norm(y_change) ‚â• Œµ))
        ùõÑ = œÉdœÉpŒ≤ * (b + Œ≤dœÉ * ùõÑ - A(y) - Œ≤ * A(Hstar(Œõ) + Astar(ùõÑ)))
        F = svd(Œõ - œÉ2 * (H(y) / Œ≤ + H(Hstar(Œõ) + Astar(ùõÑ))))
        Œõ = F.U * Diagonal(min.(F.S, Œº)) * F.Vt
        y_change = œÑŒ≤ * (Hstar(Œõ) + Astar(ùõÑ))
        y += y_change
        numIter += 1
        if (numIter % gap_check_freq == 0
            || (norm(ùõÑ - ùõÑ_prev) < Œµ
                && norm(Œõ - Œõ_prev) < Œµ
                && norm(y_change) < Œµ))
            fval = f_obj(y)
            (yh, dval) = d2(Œõ)
            fvalh = f_obj(yh)
            if fval < min_fval
                min_fval = fval
                y_best = y
            end
            if fvalh < min_fval
                min_fval = fvalh
                y_best = yh
            end
            min_dval = min(min_dval, dval)
            duality_gap = (min_fval + min_dval) / max(1, abs(min_dval))
            #@printf "fval = %f, dval = %f\n" fval dval
        end
    end

    #@printf "Œº = %f, duality_gap = %f, numIter = %d\n" Œº duality_gap numIter
    y_best
end

end
